<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Motivational</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        /* Universal box-sizing for consistent layout */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        /* Base body styles */
        body {
            font-family: 'Montserrat', sans-serif;
            background: #000000; /* Dark background */
            min-height: 100vh;
            color: white;
            position: relative;
            overflow-x: hidden; /* Prevent horizontal scrolling */
            line-height: 1.6;
            font-size: 20px;
        }

        /* Background gradients without animation */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background:
                radial-gradient(circle at 20% 80%, rgba(0, 255, 127, 0.2) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(0, 191, 255, 0.2) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(173, 255, 47, 0.18) 0%, transparent 50%),
                radial-gradient(circle at 60% 70%, rgba(0, 255, 127, 0.12) 0%, transparent 50%);
            pointer-events: none; /* Allow clicks to pass through */
            z-index: -1; /* Behind other content */
        }

        /* Logo styling */
        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            background: linear-gradient(45deg, #00ff7f, #adff2f, #00bfff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 0 26px rgba(0, 255, 127, 0.7);
            animation: logoGlow 4s ease-in-out infinite alternate; /* Logo glow animation */
            z-index: 100;
            margin: 0 8px;
            white-space: nowrap;
        }

        /* Keyframes for logo glow */
        @keyframes logoGlow {
            0% { text-shadow: 0 0 26px rgba(0, 255, 127, 0.7); }
            100% { text-shadow: 0 0 32px rgba(0, 255, 127, 0.95), 0 0 40px rgba(173, 255, 47, 0.5); }
        }

        /* Main content container */
        .main-container {
            max-width: 100%;
            margin: 0 auto;
            padding: 85px 80px 80px; /* Padding to account for fixed header */
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        /* Fixed header styles */
        .header {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px 80px;
            background: rgba(10, 10, 10, 0.9);
            backdrop-filter: blur(30px);
            border-bottom: 1px solid rgba(0, 255, 127, 0.4);
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            z-index: 50;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.5);
            flex-direction: column;
            gap: 6px;
        }

        /* Header content layout */
        .header-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 100%;
            margin: 0 auto;
        }

        /* Top row within header */
        .header-top-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            margin-bottom: 0;
        }

        /* Back arrow icon styling */
        .back-arrow {
            width: 26px;
            height: 26px;
            cursor: pointer;
            transition: all 0.3s ease;
            filter: drop-shadow(0 0 8px rgba(0, 255, 127, 0.5));
            flex-shrink: 0;
        }

        .back-arrow:hover {
            transform: scale(1.07) translateX(-2px);
            filter: drop-shadow(0 0 15px rgba(0, 255, 127, 0.9));
        }

        /* Search bar styling */
        .search-bar {
            width: 100%;
            max-width: 580px;
            background: rgba(255, 255, 255, 0.07);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(0, 255, 127, 0.28);
            border-radius: 26px;
            padding: 9px 18px;
            color: white;
            font-size: 14px;
            font-family: 'Montserrat', sans-serif;
            transition: all 0.3s ease;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.4);
        }

        .search-bar::placeholder {
            color: rgba(255, 255, 255, 0.55);
        }

        .search-bar:focus {
            outline: none;
            border-color: rgba(0, 255, 127, 0.65);
            box-shadow: 0 0 16px rgba(0, 255, 127, 0.5);
            background: rgba(255, 255, 255, 0.09);
        }

        /* Header icons container */
        .header-icons {
            display: flex;
            gap: 16px;
            flex-shrink: 0;
        }

        /* Individual header icon styling */
        .icon {
            width: 26px;
            height: 26px;
            cursor: pointer;
            transition: all 0.3s ease;
            filter: drop-shadow(0 0 6px rgba(0, 255, 127, 0.5));
        }

        .icon:hover {
            transform: scale(1.07) rotate(2deg);
            filter: drop_shadow(0 0 13px rgba(0, 255, 127, 0.9));
        }

        /* Grid for feed posts */
        .feed-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 50px;
            padding-top: 40px;
            width: 100%; /* Ensure grid takes full width of main-container */
            max-width: 100%; /* Ensure grid takes full width of main-container */
            /* Crucial for preventing stretching of all items in a row */
            align-items: start; /* Align items to the start of their grid area */
        }

        /* Individual post styling */
        .post {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(30px);
            border: 1px solid rgba(0, 255, 127, 0.3);
            border-radius: 35px;
            padding: 50px;
            box-shadow:
                0 30px 60px rgba(0, 0, 0, 0.6),
                0 0 80px rgba(0, 255, 127, 0.15),
                inset 0 1px 0 rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            /* Important: Remove `height: 100%;` or `flex-grow: 1;` from .post itself if it conflicts */
        }

        /* Post content area */
        .post-content {
            /* Removed flex-grow: 1; to prevent it from forcing equal height within the post flex container */
            display: flex;
            flex-direction: column;
        }

        /* Hover effect for posts */
        .post::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 255, 127, 0.1), transparent);
            transition: left 1s ease;
        }

        .post:hover::before {
            left: 100%;
        }

        .post:hover {
            border-color: rgba(0, 255, 127, 0.5);
            box-shadow:
                0 35px 70px rgba(0, 0, 0, 0.7),
                0 0 100px rgba(0, 255, 127, 0.25),
                inset 0 1px 0 rgba(255, 255, 255, 0.25);
            transform: translateY(-15px) scale(1.04);
        }

        /* Post header (only user info now) */
        .post-header {
            display: flex;
            align-items: center;
            margin-bottom: 35px;
            cursor: pointer; /* Make header clickable */
            justify-content: center; /* Center the user info when avatar is removed */
        }

        /* User info text */
        .user-info {
            text-align: center; /* Center text within the user-info div */
        }

        .user-info h3 {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 12px;
            background: linear-gradient(45deg, #00ff7f, #adff2f);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .user-info p {
            font-size: 18px;
            color: rgba(0, 191, 255, 0.95);
            font-weight: 500;
        }

        /* Video container for responsiveness */
        .video-container {
            position: relative;
            width: 100%;
            padding-top: 56.25%; /* 16:9 aspect ratio */
            border-radius: 30px;
            overflow: hidden;
            margin-bottom: 35px;
            cursor: pointer;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
            margin-top: auto; /* Pushes video to bottom if content above is short */
            display: block; /* Ensure the anchor tag behaves like a block */
        }

        .video-container:hover {
            transform: scale(1.04);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.6);
        }

        /* Video thumbnail image */
        .video-thumbnail {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .video-container:hover .video-thumbnail {
            transform: scale(1.08);
        }

        /* Play button overlay */
        .play-button {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 95px;
            height: 95px;
            background: rgba(0, 255, 127, 0.98);
            backdrop-filter: blur(15px);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 20px 50px rgba(0, 255, 127, 0.5);
            border: 5px solid rgba(255, 255, 255, 0.5);
            z-index: 2; /* Ensure it's above the thumbnail */
        }

        .play-button:hover {
            background: rgba(173, 255, 47, 0.98);
            transform: translate(-50%, -50%) scale(1.18);
            box-shadow: 0 25px 60px rgba(0, 255, 127, 0.7);
        }

        .play-button::after {
            content: '';
            width: 0;
            height: 0;
            border-left: 32px solid rgba(0, 0, 0, 0.9);
            border-top: 20px solid transparent;
            border-bottom: 20px solid transparent;
            margin-left: 8px;
        }

        /* Styles for the embedded video iframe */
        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 30px;
            z-index: 1; /* Below play button initially */
        }

        /* Video duration display */
        .video-duration {
            position: absolute;
            bottom: 25px;
            right: 25px;
            background: rgba(0, 0, 0, 0.88);
            backdrop-filter: blur(15px);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-size: 16px;
            font-weight: 600;
            border: 1px solid rgba(0, 255, 127, 0.5);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
            z-index: 2; /* Ensure it's above the thumbnail */
        }

        /* Post actions (like, comment, share buttons) */
        .post-actions {
            display: flex;
            gap: 10px; /* Reduced gap for better fitting */
            color: rgba(255, 255, 255, 0.85);
            font-size: 16px;
            font-weight: 600;
            margin-top: 25px;
            justify-content: space-between; /* Distribute space between buttons */
            align-items: center;
        }

        /* Individual action button styling */
        .action-button {
            display: flex;
            align-items: center;
            justify-content: center; /* Center content within button */
            gap: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 8px 12px;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.09);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(0, 255, 127, 0.4);
            flex: 1; /* Allow them to grow and shrink equally */
            min-width: 0; /* Allow shrinking below content size if necessary */
            max-width: none; /* Remove max-width constraint */
        }

        .action-button span {
            white-space: nowrap; /* Prevent text from wrapping */
        }

        .action-button:hover {
            color: #00ff7f;
            background: rgba(0, 255, 127, 0.18);
            border-color: rgba(0, 255, 127, 0.6);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 255, 127, 0.3);
        }

        /* Liked state for the like button */
        .action-button.liked {
            color: #ff4d4d; /* Red color for liked state */
            background: rgba(255, 77, 77, 0.18);
            border-color: rgba(255, 77, 77, 0.6);
        }

        .action-button.liked:hover {
            color: #ff1a1a;
            background: rgba(255, 77, 77, 0.25);
            border-color: rgba(255, 77, 77, 0.8);
        }

        /* Action icon styling */
        .action-icon {
            width: 20px;
            height: 20px;
            transition: all 0.3s ease;
        }

        .action-button:hover .action-icon {
            transform: scale(1.1);
        }

        /* Particle animation (kept for aesthetic) */
        .particle {
            position: fixed;
            width: 4px;
            height: 4px;
            background: rgba(0, 255, 127, 0.4);
            border-radius: 50%;
            animation: floatParticle 22s infinite linear;
            pointer-events: none;
            z-index: 1;
        }

        @keyframes floatParticle {
            0% {
                transform: translateY(100vh) translateX(0) rotate(0deg);
                opacity: 0;
            }
            10% { opacity: 0.5; }
            90% { opacity: 0.5; }
            100% {
                transform: translateY(-200px) translateX(80px) rotate(360deg);
                opacity: 0;
            }
        }

        /* Load More Button */
        .load-more-button {
            background: linear-gradient(45deg, #00ff7f, #00bfff);
            color: black;
            padding: 15px 30px;
            border-radius: 30px;
            font-size: 18px;
            font-weight: 700;
            border: none;
            cursor: pointer;
            margin-top: 50px;
            box-shadow: 0 10px 30px rgba(0, 255, 127, 0.4);
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .load-more-button:hover {
            background: linear-gradient(45deg, #adff2f, #00ff7f);
            box-shadow: 0 15px 40px rgba(0, 255, 127, 0.6);
            transform: translateY(-3px);
        }

        /* Comment Section Styles */
        .comment-section {
            margin-top: 25px;
            padding-top: 20px;
            border-top: 1px solid rgba(0, 255, 127, 0.2);
            display: none; /* Hidden by default */
            flex-direction: column;
            gap: 15px;
            width: 100%; /* Ensure comment section takes full width of post */
        }

        .comment-section.active {
            display: flex; /* Show when active */
        }

        .comment-input-area {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .comment-input {
            flex-grow: 1;
            padding: 10px 15px;
            border-radius: 20px;
            border: 1px solid rgba(0, 255, 127, 0.4);
            background: rgba(255, 255, 255, 0.07);
            color: white;
            font-family: 'Montserrat', sans-serif;
            font-size: 14px;
            resize: vertical; /* Allow vertical resizing */
            min-height: 40px;
            max-height: 120px;
        }

        .comment-input::placeholder {
            color: rgba(255, 255, 255, 0.55);
        }

        .comment-input:focus {
            outline: none;
            border-color: rgba(0, 255, 127, 0.65);
            box-shadow: 0 0 10px rgba(0, 255, 127, 0.4);
        }

        .post-comment-button {
            background: linear-gradient(45deg, #00ff7f, #adff2f);
            color: black;
            padding: 10px 20px;
            border-radius: 20px;
            border: none;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
            white-space: nowrap; /* Prevent text wrapping */
            flex-shrink: 0; /* Prevent button from shrinking */
        }

        .post-comment-button:hover {
            background: linear-gradient(45deg, #adff2f, #00ff7f);
            box-shadow: 0 0 15px rgba(0, 255, 127, 0.5);
            transform: translateY(-1px);
        }

        .comments-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .comment-item {
            background: rgba(255, 255, 255, 0.05);
            padding: 10px 15px;
            border-radius: 15px;
            border: 1px solid rgba(0, 191, 255, 0.2);
        }

        .comment-author {
            font-weight: 700;
            color: #00bfff;
            margin-bottom: 5px;
            font-size: 15px;
        }

        .comment-text {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.9);
        }


        /* Responsive adjustments */
        @media (max-width: 1600px) {
            .main-container {
                padding: 80px 60px 60px;
            }
            .header {
                padding: 7px 60px;
            }
            .search-bar {
                max-width: 480px;
                font-size: 13px;
                padding: 8px 15px;
            }
            .feed-grid {
                grid-template-columns: repeat(3, 1fr);
                gap: 45px;
            }
            .logo {
                font-size: 1.6rem;
                margin: 0 8px;
            }
            .header-top-row {
                margin-bottom: 0;
            }
            .back-arrow, .icon {
                width: 25px;
                height: 25px;
            }
            .user-info h3 {
                font-size: 22px;
            }
            .user-info p {
                font-size: 17px;
            }
            .play-button {
                width: 90px;
                height: 90px;
            }
            .play-button::after {
                border-left: 30px solid rgba(0, 0, 0, 0.9);
                border-top: 19px solid transparent;
                border-bottom: 19px transparent;
                margin-left: 7px;
            }
            .post {
                padding: 45px;
            }
            .post-actions {
                font-size: 15px;
                gap: 12px;
                margin-top: 20px;
            }
            .action-button {
                padding: 7px 10px;
                gap: 6px;
                border-radius: 20px;
            }
            .action-icon {
                width: 18px;
                height: 18px;
            }
            .comment-input {
                font-size: 13px;
                padding: 9px 14px;
            }
            .post-comment-button {
                font-size: 13px;
                padding: 9px 18px;
            }
            .comment-author {
                font-size: 14px;
            }
            .comment-text {
                font-size: 13px;
            }
        }

        @media (max-width: 1200px) {
            .main-container {
                padding: 70px 40px 40px;
            }
            .header {
                padding: 5px 40px;
                gap: 5px;
            }
            .search-bar {
                max-width: 320px;
                font-size: 12px;
                padding: 7px 12px;
            }
            .feed-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 40px;
            }
            .logo {
                font-size: 1.4rem;
                margin: 0 6px;
            }
            .back-arrow, .icon {
                width: 22px;
                height: 22px;
            }
            .header-icons {
                gap: 14px;
            }
            .post {
                padding: 40px;
            }
            .user-info h3 {
                font-size: 20px;
            }
            .user-info p {
                font-size: 16px;
            }
            .play-button {
                width: 80px;
                height: 80px;
            }
            .play-button::after {
                border-left: 26px solid rgba(0, 0, 0, 0.9);
                border-top: 17px solid transparent;
                border-bottom: 17px transparent;
                margin-left: 6px;
            }
            .post-actions {
                font-size: 14px;
                gap: 10px;
                margin-top: 18px;
            }
            .action-button {
                padding: 6px 9px;
                gap: 5px;
                border-radius: 18px;
            }
            .action-icon {
                width: 16px;
                height: 16px;
            }
            .comment-input {
                font-size: 12px;
                padding: 8px 12px;
            }
            .post-comment-button {
                font-size: 12px;
                padding: 8px 16px;
            }
            .comment-author {
                font-size: 13px;
            }
            .comment-text {
                font-size: 12px;
            }
        }

        @media (max-width: 860px) {
            body {
                font-size: 16px;
            }
            .main-container {
                padding: 15px;
            }

            .header {
                padding: 4px 15px;
                gap: 5px;
            }

            .header-content {
                flex-direction: column;
                align-items: center;
                width: 100%;
            }

            .header-top-row {
                justify-content: space-between;
                align-items: center;
                width: 100%;
                margin-bottom: 0;
            }

            .back-arrow {
                width: 20px;
                height: 20px;
            }

            .logo {
                font-size: 1.1rem;
                margin: 0 5px;
            }

            .search-bar {
                font-size: 10px;
                padding: 5px 7px;
                width: 100%;
                max-width: none;
            }

            .header-icons {
                gap: 3px;
            }

            .icon {
                width: 20px;
                height: 20px;
            }

            .feed-grid {
                padding-top: 15px;
                gap: 20px;
                grid-template-columns: 1fr;
            }

            .post {
                padding: 20px;
            }

            .user-info h3 {
                font-size: 15px;
            }

            .user-info p {
                font-size: 11px;
            }

            .play-button {
                width: 50px;
                height: 50px;
                border-width: 2px;
            }

            .play-button::after {
                border-left: 14px solid rgba(0, 0, 0, 0.9);
                border-top: 9px solid transparent;
                border-bottom: 9px solid transparent;
                margin-left: 3px;
            }

            .video-duration {
                font-size: 10px;
                padding: 4px 8px;
                bottom: 8px;
                right: 8px;
            }

            .post-actions {
                font-size: 12px;
                gap: 6px;
                margin-top: 12px;
            }
            /* For very small screens, make buttons take full width or stack cleanly */
            .action-button {
                padding: 4px 7px;
                gap: 3px;
                border-radius: 12px;
                flex: 1; /* Allow buttons to take equal space */
                min-width: unset; /* Remove min-width to allow shrinking */
                max-width: unset; /* Remove max-width */
            }
            /* Adjust for single column if needed on smallest screens */
            .post-actions {
                justify-content: space-around; /* Distribute space when wrapping */
            }
            .action-icon {
                width: 12px;
                height: 12px;
            }
            .comment-input {
                font-size: 10px;
                padding: 6px 10px;
            }
            .post-comment-button {
                font-size: 10px;
                padding: 6px 12px;
            }
            .comment-author {
                font-size: 11px;
            }
            .comment-text {
                font-size: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-top-row">
            <a href="hiraya_homepage.html">
                <svg class="back-arrow icon" fill="white" viewBox="0 0 24 24">
                    <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
                </svg>
            </a>
            <div class="logo">Hiraya</div>
            <div class="header-icons">
                <a href="#" id="checkmark-icon">
                    <svg class="icon" fill="white" viewBox="0 0 24 24">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                </a>
                <a href="#" id="menu-icon">
                    <svg class="icon" fill="white" viewBox="0 0 24 24">
                        <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
                    </svg>
                </a>
            </div>
        </div>
        <input type="text" class="search-bar" placeholder="Search for inspiration...">
    </div>

    <div class="main-container">
        <div class="feed-grid" id="feed-grid">
            </div>
        <button class="load-more-button" id="load-more-button">Load More Posts</button>
    </div>

    <script>
        // Data for the social feed posts
        const postsData = [
            {
                id: 'post1',
                user: 'Jeff Nippard',
                description: 'How To Build Muscle And Lose Fat At The Same Time',
                // avatar: 'davidlaid.jpg', // Avatar removed
                thumbnail: 'https://i.ytimg.com/vi/a_62j9c3yF8/maxresdefault.jpg',
                videoLink: 'https://www.youtube.com/watch?v=M4K0s792wAU?autoplay=1', // YouTube embed URL
                duration: '10:48',
                likes: 72,
                comments: 5,
                shares: 12,
                isLiked: false,
                commentsList: [
                    { author: 'Miguel', text: 'Great video!' },
                    { author: 'Richmon', text: 'Inspired by your dedication.' }
                ]
            },
            {
                id: 'post2',
                user: 'Judson Brewer',
                description: 'A simple way to break a bad habit',
                // avatar: 'https://i.ibb.co/k2c53fW/judson-brewer.jpg', // Avatar removed
                thumbnail: 'https://i.ytimg.com/vi/vx-k_02cK8I/maxresdefault.jpg',
                videoLink: 'https://www.youtube.com/embed/-moW9jvvMr4?autoplay=1', // YouTube embed URL
                duration: '8:42',
                likes: 124,
                comments: 23,
                shares: 8,
                isLiked: false,
                commentsList: [
                    { author: 'Tristan', text: 'Very insightful talk, thank you!' }
                ]
            },
            {
                id: 'post3',
                user: 'Joe Rogan',
                description: 'The Rogan Experience #1859 - David Goggins',
                // avatar: 'https://i.ibb.co/V93tL2M/joe-rogan.jpg', // Avatar removed
                thumbnail: 'https://i.ytimg.com/vi/BNE_A4pA-2s/maxresdefault.jpg',
                videoLink: 'https://www.youtube.com/embed/AbDT2JTSnA8?autoplay=1', // YouTube embed URL
                duration: '2:54:12',
                likes: 2100,
                comments: 89,
                shares: 156,
                isLiked: false,
                commentsList: []
            },
            {
                id: 'post4',
                user: 'Rikuuu',
                description: 'Grow a garden tutorial #999 - FT. TristiBlox',
                // avatar: 'https://i.ibb.co/c860298/generic-avatar.png', // Avatar removed
                thumbnail: 'https://placehold.co/1280x720/000000/FFFFFF?text=Rikuuu+Video', // Placeholder for the last one
                videoLink: 'https://www.youtube.com/embed/dQw4w9WgXcQ?autoplay=1', // Example: Rick Astley for demonstration
                duration: '15:30',
                likes: 39100,
                comments: 1200,
                shares: 3400,
                isLiked: false,
                commentsList: [
                    { author: 'Franz', text: 'This tutorial is so helpful!' },
                    { author: 'Francine', text: 'Can\'t wait to try this out.' },
                    { author: 'Matt', text: 'What about growing herbs?' }
                ]
            }
        ];

        /**
         * Formats a number into a compact string (e.g., 1200 -> 1.2k, 34000 -> 34k).
         * @param {number} num The number to format.
         * @returns {string} The formatted string.
         */
        function formatNumber(num) {
            if (num >= 1000000) {
                return (num / 1000000).toFixed(1).replace(/\.0$/, '') + 'M';
            }
            if (num >= 1000) {
                return (num / 1000).toFixed(1).replace(/\.0$/, '') + 'k';
            }
            return num.toString();
        }

        const feedGrid = document.getElementById('feed-grid');
        const loadMoreButton = document.getElementById('load-more-button');
        const postsPerLoad = 4; // Number of posts to load at once
        let loadedPostsCount = 0;

        /**
         * Creates an SVG icon for actions.
         * @param {string} dPath The 'd' attribute for the SVG path.
         * @returns {string} The SVG icon HTML string.
         */
        function createActionIcon(dPath) {
            return `<svg class="action-icon" fill="currentColor" viewBox="0 0 24 24"><path d="${dPath}"/></svg>`;
        }

        /**
         * Generates the HTML for a single post.
         * @param {object} postData The data for the post.
         * @returns {string} The HTML string for the post.
         */
        function generatePostHTML(postData) {
            const commentsHtml = postData.commentsList.map(comment => `
                <div class="comment-item">
                    <div class="comment-author">${comment.author}</div>
                    <div class="comment-text">${comment.text}</div>
                </div>
            `).join('');

            return `
                <div class="post" data-id="${postData.id}">
                    <div class="post-header">
                        <div class="user-info">
                            <h3>${postData.user}</h3>
                            <p>${postData.description}</p>
                        </div>
                    </div>
                    <a href="#" class="video-container" data-videolink="${postData.videoLink}">
                        <img src="${postData.thumbnail}" alt="Video Thumbnail" class="video-thumbnail">
                        <div class="play-button"></div>
                        <span class="video-duration">${postData.duration}</span>
                    </a>
                    <div class="post-actions">
                        <div class="action-button like-button ${postData.isLiked ? 'liked' : ''}" data-post-id="${postData.id}">
                            ${createActionIcon('M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z')}
                            <span class="likes-count">${formatNumber(postData.likes)}</span>
                        </div>
                        <div class="action-button comment-toggle-button" data-post-id="${postData.id}">
                            ${createActionIcon('M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z')}
                            <span>${formatNumber(postData.comments)}</span>
                        </div>
                        <div class="action-button share-button">
                            ${createActionIcon('M18 16.08c-.76 0-1.44.3-1.96.76L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.52.46 1.2.76 1.96.76 1.38 0 2.5-1.12 2.5-2.5S19.38 2 18 2 15.5 3.12 15.5 4.5c0 .24.04.47.09.7L8.54 9.8c-.52-.46-1.2-.76-1.96-.76-1.38 0-2.5 1.12-2.5 2.5s1.12 2.5 2.5 2.5c.76 0 1.44-.3 1.96-.76l7.05 4.11c-.05.23-.09.46-.09.7 0 1.38 1.12 2.5 2.5 2.5s2.5-1.12 2.5-2.5-1.12-2.5-2.5-2.5z')}
                            <span>${formatNumber(postData.shares)}</span>
                        </div>
                    </div>
                    <div class="comment-section" id="comments-${postData.id}">
                        <div class="comments-list">${commentsHtml}</div>
                        <div class="comment-input-area">
                            <textarea class="comment-input" placeholder="Add a comment..." rows="1"></textarea>
                            <button class="post-comment-button">Post</button>
                        </div>
                    </div>
                </div>
            `;
        }

        /**
         * Renders posts to the feed grid.
         * @param {number} count The number of posts to render.
         */
        function renderPosts(count) {
            const fragment = document.createDocumentFragment();
            for (let i = 0; i < count && loadedPostsCount < postsData.length; i++) {
                const post = postsData[loadedPostsCount];
                const postDiv = document.createElement('div');
                postDiv.innerHTML = generatePostHTML(post);
                fragment.appendChild(postDiv.firstElementChild);
                loadedPostsCount++;
            }
            feedGrid.appendChild(fragment);

            addEventListenersToNewPosts(); // Attach event listeners after new posts are added

            if (loadedPostsCount >= postsData.length) {
                loadMoreButton.style.display = 'none'; // Hide button if all posts are loaded
            }
        }

        /**
         * Adds event listeners to dynamically created elements.
         */
        function addEventListenersToNewPosts() {
            document.querySelectorAll('.video-container:not([data-listener-added])').forEach(videoContainer => {
                videoContainer.addEventListener('click', function(event) {
                    event.preventDefault();
                    const videoLink = this.dataset.videolink;
                    // Replace youtube.com with youtube-nocookie.com for privacy, if applicable
                    const embedUrl = videoLink.replace("youtube.com", "youtube-nocookie.com").replace("watch?v=", "embed/");
                    this.innerHTML = `<iframe src="${embedUrl}?autoplay=1" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
                });
                videoContainer.setAttribute('data-listener-added', 'true');
            });

            document.querySelectorAll('.like-button:not([data-listener-added])').forEach(button => {
                button.addEventListener('click', function() {
                    this.classList.toggle('liked');
                    const likesCountSpan = this.querySelector('.likes-count');
                    let currentLikes = parseInt(likesCountSpan.innerText.replace('k', '000').replace('M', '000000')) || 0;

                    const postId = this.dataset.postId;
                    const postIndex = postsData.findIndex(p => p.id === postId);

                    if (this.classList.contains('liked')) {
                        currentLikes++;
                        postsData[postIndex].isLiked = true;
                    } else {
                        currentLikes--;
                        postsData[postIndex].isLiked = false;
                    }
                    postsData[postIndex].likes = currentLikes;
                    likesCountSpan.innerText = formatNumber(currentLikes);
                });
                button.setAttribute('data-listener-added', 'true');
            });

            document.querySelectorAll('.comment-toggle-button:not([data-listener-added])').forEach(button => {
                button.addEventListener('click', function() {
                    const postId = this.dataset.postId;
                    const commentSection = document.getElementById(`comments-${postId}`);
                    commentSection.classList.toggle('active');
                });
                button.setAttribute('data-listener-added', 'true');
            });

            document.querySelectorAll('.post-comment-button:not([data-listener-added])').forEach(button => {
                button.addEventListener('click', function() {
                    const commentInput = this.closest('.comment-input-area').querySelector('.comment-input');
                    const commentText = commentInput.value.trim();
                    if (commentText) {
                        const commentsList = this.closest('.comment-section').querySelector('.comments-list');
                        const newCommentHtml = `
                            <div class="comment-item">
                                <div class="comment-author">Current User</div> <div class="comment-text">${commentText}</div>
                            </div>
                        `;
                        commentsList.insertAdjacentHTML('beforeend', newCommentHtml);
                        commentInput.value = ''; // Clear the input

                        // Update comments count (optional, but good for dynamic data)
                        const postId = this.closest('.post').dataset.id;
                        const postIndex = postsData.findIndex(p => p.id === postId);
                        if (postIndex !== -1) {
                            postsData[postIndex].comments++;
                            postsData[postIndex].commentsList.push({ author: 'Current User', text: commentText }); // Add to data
                            // Update the display for the comment count button
                            const commentCountSpan = this.closest('.post').querySelector('.comment-toggle-button span');
                            if (commentCountSpan) {
                                commentCountSpan.innerText = formatNumber(postsData[postIndex].comments);
                            }
                        }
                    }
                });
                button.setAttribute('data-listener-added', 'true');
            });
        }

        // Initial load of posts
        renderPosts(postsPerLoad);

        // Load more posts on button click
        loadMoreButton.addEventListener('click', () => {
            renderPosts(postsPerLoad);
        });

        // Generate particles
        function createParticle() {
            const particle = document.createElement('div');
            particle.classList.add('particle');
            document.body.appendChild(particle);

            const size = Math.random() * 5 + 2; // Size between 2px and 7px
            const startX = Math.random() * window.innerWidth;
            const startY = window.innerHeight;
            const duration = Math.random() * 10 + 15; // Duration between 15s and 25s
            const delay = Math.random() * 5; // Delay up to 5s

            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            particle.style.left = `${startX}px`;
            particle.style.top = `${startY}px`;
            particle.style.animationDuration = `${duration}s`;
            particle.style.animationDelay = `${delay}s`;

            // Remove particle after animation
            particle.addEventListener('animationend', () => {
                particle.remove();
            });
        }

        // Create a few particles initially
        for (let i = 0; i < 30; i++) {
            createParticle();
        }

        // Periodically create new particles
        setInterval(createParticle, 1000);

    </script>
</body>
</html>
